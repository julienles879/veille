import feedparser
import dateutil.parser  # üîπ Pour parser les dates de mani√®re robuste
from datetime import datetime
from django.utils import timezone
from background_task import background
from .models import RSSFeedEntry
from feeds.models import RSSFeed

@background(schedule=10)
def fetch_articles_for_feeds():
    """
    T√¢che pour r√©cup√©rer les articles des flux RSS.
    """
    repeat_time = 2 * 60  # 2 minutes

    feeds = RSSFeed.objects.all()
    for feed in feeds:
        parsed_feed = feedparser.parse(feed.url)
        if parsed_feed.bozo:  # V√©rifie si le flux est valide
            print(f"‚ö†Ô∏è Erreur lors du parsing du flux : {feed.url}")
            continue

        for entry in parsed_feed.entries:
            # V√©rifie si l'article existe d√©j√†
            if RSSFeedEntry.objects.filter(link=entry.link).exists():
                continue

            # üîç 1Ô∏è‚É£ R√©cup√©ration de la date
            published_date = None
            if "published" in entry:
                try:
                    published_date = dateutil.parser.parse(entry["published"])
                except (ValueError, TypeError):
                    print(f"‚ö†Ô∏è Erreur parsing `published` pour {entry.get('title', 'Sans titre')}")
            elif "dc:date" in entry:
                try:
                    published_date = dateutil.parser.parse(entry["dc:date"])
                except (ValueError, TypeError):
                    print(f"‚ö†Ô∏è Erreur parsing `dc:date` pour {entry.get('title', 'Sans titre')}")

            # üîπ 2Ô∏è‚É£ Si la date est toujours None, on met la date actuelle
            if not published_date:
                print(f"‚ö†Ô∏è Aucun `published_at` trouv√© pour '{entry.get('title', 'Sans titre')}', utilisation de `timezone.now()`")
                published_date = timezone.now()

            # üîπ 3Ô∏è‚É£ Ajout de l'article √† la base de donn√©es
            RSSFeedEntry.objects.create(
                feed=feed,
                title=entry.get("title", "Sans titre"),
                link=entry.get("link", "#"),
                content=entry.get("summary", ""),  # R√©cup√®re le r√©sum√© si disponible
                published_at=published_date  # ‚úÖ Toujours d√©fini !
            )
            print(f"‚úÖ Article ajout√© : {entry.get('title', 'Sans titre')}")

    # Planifier la t√¢che √† nouveau avec le d√©lai fix√©
    fetch_articles_for_feeds(repeat=repeat_time) 
